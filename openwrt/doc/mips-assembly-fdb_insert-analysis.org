#+title: mips assembly `fdb_insert' analysis

* kernel oops
#+BEGIN_SRC sh
[117718.040000] CPU 0 Unable to handle kernel paging request at virtual address 00000003, epc == 8012afa8, ra == 8012adac
[117718.050000] Oops[#1]:
[117718.050000] CPU: 0 PID: 0 Comm: swapper Tainted: P             3.10.49 #1
[117718.050000] task: 8032eba8 ti: 8031c000 task.ti: 8031c000
[117718.050000] $ 0   : 00000000 00000000 00000040 00000000
[117718.050000] $ 4   : 844c4d80 00000000 00000000 802d0000
[117718.050000] $ 8   : 00000000 8543a81c 00000010 8031dd70
[117718.050000] $12   : 80301770 00000007 00000000 d6d6a3e8
[117718.050000] $16   : 8543a800 861080c0 844c4d80 00b32a6c
[117718.050000] $20   : 8304d3c8 87826000 00000000 8031f6d8
[117718.050000] $24   : 00000010 80285910                  
[117718.050000] $28   : 8031c000 8031db98 80320000 8012adac
[117718.050000] Hi    : 00000000
[117718.050000] Lo    : 00000000
[117718.050000] epc   : 8012afa8 fdb_insert+0xd4/0x1b4
[117718.050000]     Tainted: P            
[117718.050000] ra    : 8012adac fdb_fill_info.isra.13+0xc0/0x184
[117718.050000] Status: 1100dc03	KERNEL EXL IE 
[117718.050000] Cause : 00800008
[117718.050000] BadVA : 00000003
[117718.050000] PrId  : 00019750 (MIPS 74Kc)
#+END_SRC

* fdb_insert c code
linux-3.10.49/net/bridge/br_fdb.c
#+BEGIN_SRC c
/* Add entry for local address of interface */
int br_fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
          const unsigned char *addr, u16 vid)
{
    int ret;

    spin_lock_bh(&br->hash_lock);
    ret = fdb_insert(br, source, addr, vid);
    spin_unlock_bh(&br->hash_lock);
    return ret;
}

static int fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
          const unsigned char *addr, u16 vid)
{
    struct hlist_head *head = &br->hash[br_mac_hash(addr, vid)];
    struct net_bridge_fdb_entry *fdb;

    if (!is_valid_ether_addr(addr))
        return -EINVAL;

    fdb = fdb_find(head, addr, vid);
    if (fdb) {
        /* it is okay to have multiple ports with same
         * address, just use the first one.
         */
        if (fdb->is_local)
            return 0;
        br_warn(br, "adding interface %s with same address "
               "as a received packet\n",
               source ? source->dev->name : br->dev->name);
        fdb_delete(br, fdb);
    }

    fdb = fdb_create(head, source, addr, vid);
    if (!fdb)
        return -ENOMEM;

    fdb->is_local = fdb->is_static = 1;
    fdb_notify(br, fdb, RTM_NEWNEIGH);
    return 0;
}
#+END_SRC

* get it's assembly code
mips-openwrt-linux-objdump -dr vmlinux.o >> linux-dr

#+BEGIN_SRC asm
Disassembly of section .text.fdb_insert:

00000000 <fdb_insert>:
   0:   27bdffd0    addiu   sp,sp,-48              ; sp = sp - 48
   4:   afb50028    sw  s5,40(sp)                  ; memory[sp+40] = s5
   8:   afb30020    sw  s3,32(sp)                  ; memory[sp+32] = s3
   c:   afb2001c    sw  s2,28(sp)                  ; memory[sp+28] = s2
  10:   afb10018    sw  s1,24(sp)                  ; memory[sp+24] = s1
  14:   afb00014    sw  s0,20(sp)                  ; memory[sp+20] = s0
  18:   afbf002c    sw  ra,44(sp)                  ; memory[sp+44] = ra - return address
  1c:   afb40024    sw  s4,36(sp)                  ; memory[sp+36] = s4
  20:   00808821    move    s1,a0                  ; s1 = a0
  24:   88c40002    lwl a0,2(a2)                   ; a0 = memory[a2+2]
  28:   3c020000    lui v0,0x0                     ; v0 = 0
            28: R_MIPS_HI16 .data..read_mostly
  2c:   3c03dead    lui v1,0xdead
  30:   98c40005    lwr a0,5(a2)                   ; a0 = memory[a2 + 5]
  34:   8c4238ec    lw  v0,14572(v0)               ; v0 = memory[v0 + 14572]
            34: R_MIPS_LO16 .data..read_mostly
  38:   3463beef    ori v1,v1,0xbeef
  3c:   00832021    addu    a0,a0,v1
  40:   00e31821    addu    v1,a3,v1
  44:   00621026    xor v0,v1,v0
  48:   00a09821    move    s3,a1
  4c:   00232c82    ror a1,v1,0x12
  50:   00451023    subu    v0,v0,a1
  54:   00222d42    ror a1,v0,0x15
  58:   00442026    xor a0,v0,a0
  5c:   00852023    subu    a0,a0,a1
  60:   002429c2    ror a1,a0,0x7
  64:   00831826    xor v1,a0,v1
  68:   00651823    subu    v1,v1,a1
  6c:   00232c02    ror a1,v1,0x10
  70:   00621026    xor v0,v1,v0
  74:   00451023    subu    v0,v0,a1
  78:   00442026    xor a0,v0,a0
  7c:   00222f02    ror a1,v0,0x1c
  80:   00852023    subu    a0,a0,a1
  84:   00831826    xor v1,a0,v1
  88:   00242482    ror a0,a0,0x12
  8c:   00641823    subu    v1,v1,a0
  90:   0062a826    xor s5,v1,v0
  94:   00231a02    ror v1,v1,0x8
  98:   02a3a823    subu    s5,s5,v1
  9c:   90c30000    lbu v1,0(a2)
  a0:   32b500ff    andi    s5,s5,0xff
  a4:   26b50004    addiu   s5,s5,4
  a8:   0015a880    sll s5,s5,0x2
  ac:   30640001    andi    a0,v1,0x1
  b0:   00c08021    move    s0,a2
  b4:   00e09021    move    s2,a3
  b8:   0235a821    addu    s5,s1,s5
  bc:   1480000d    bnez    a0,f4 <fdb_insert+0xf4> ; branch on not equal zero
  c0:   00001021    move    v0,zero
  c4:   90c20001    lbu v0,1(a2) ; v0 = memory[a2 + 1]
  c8:   90c40002    lbu a0,2(a2) ; a0 = memory[a2 + 2]
  cc:   00621025    or  v0,v1,v0 ; v0 = v1 | v0
  d0:   00441025    or  v0,v0,a0 ; v0 = v0 | a0
  d4:   90c40003    lbu a0,3(a2) ; a0 = memory[a2 + 3]
  d8:   00441025    or  v0,v0,a0 ; v0 = v0 | a0
  dc:   90c40004    lbu a0,4(a2) ; a0 = memory[a2 + 4]
  e0:   00441025    or  v0,v0,a0 ; v0 = v0 | a0
  e4:   90c40005    lbu a0,5(a2) ; a0 = memory[a2 + 5]
  e8:   00441025    or  v0,v0,a0 ; v0 = v0 | a0
  ec:   304200ff    andi    v0,v0,0xff ; v0 = v0 & 0xff
  f0:   0002102b    sltu    v0,zero,v0
  f4:   10400023    beqz    v0,184 <fdb_insert+0x184> ; branch on euqal zero, return -EINVAL;
  f8:   02a02021    move    a0,s5
  fc:   02002821    move    a1,s0
 100:   0c000000    jal 0 <fdb_insert> ; Jumps to the calculated address and stores the return address in $26
            100: R_MIPS_26  .text.fdb_find ; fdb = fdb_find(head, addr, vid);
 104:   02403021    move    a2,s2
 108:   1040000f    beqz    v0,148 <fdb_insert+0x148> ; branch on equal zero
 10c:   0040a021    move    s4,v0
 110:   90430022    lbu v1,34(v0)
 114:   1460001e    bnez    v1,190 <fdb_insert+0x190>
 118:   00001021    move    v0,zero
 11c:   12600003    beqz    s3,12c <fdb_insert+0x12c>
 120:   8e250008    lw  a1,8(s1)
 124:   0800004c    j   130 <fdb_insert+0x130>
            124: R_MIPS_26  .text.fdb_insert
 128:   8e660004    lw  a2,4(s3)
 12c:   00a03021    move    a2,a1
 130:   3c040000    lui a0,0x0
            130: R_MIPS_HI16    $LC1
 134:   0c000000    jal 0 <fdb_insert> ; Jumps to the calculated address and stores the return address in $26
            134: R_MIPS_26  printk
 138:   24840000    addiu   a0,a0,0
            138: R_MIPS_LO16    $LC1
 13c:   02202021    move    a0,s1
 140:   0c000000    jal 0 <fdb_insert> ; Jumps to the calculated address and stores the return address in $26
            140: R_MIPS_26  .text.fdb_delete ; fdb_delete(br, fdb);
 144:   02802821    move    a1,s4
 148:   02a02021    move    a0,s5
 14c:   02602821    move    a1,s3
 150:   02003021    move    a2,s0
 154:   0c000000    jal 0 <fdb_insert>
            154: R_MIPS_26  .text.fdb_create
 158:   02403821    move    a3,s2
 15c:   1040000b    beqz    v0,18c <fdb_insert+0x18c>
 160:   24030001    li  v1,1
 164:   a0430023    sb  v1,35(v0)
 168:   a0430022    sb  v1,34(v0)
 16c:   00402821    move    a1,v0
 170:   02202021    move    a0,s1
 174:   0c000000    jal 0 <fdb_insert>
            174: R_MIPS_26  .text.fdb_notify
 178:   2406001c    li  a2,28
 17c:   08000064    j   190 <fdb_insert+0x190>
            17c: R_MIPS_26  .text.fdb_insert
 180:   00001021    move    v0,zero
 184:   08000064    j   190 <fdb_insert+0x190>
            184: R_MIPS_26  .text.fdb_insert
 188:   2402ffea    li  v0,-22
 18c:   2402fff4    li  v0,-12
 190:   8fbf002c    lw  ra,44(sp)
 194:   8fb50028    lw  s5,40(sp)
 198:   8fb40024    lw  s4,36(sp)
 19c:   8fb30020    lw  s3,32(sp)
 1a0:   8fb2001c    lw  s2,28(sp)
 1a4:   8fb10018    lw  s1,24(sp)
 1a8:   8fb00014    lw  s0,20(sp)
 1ac:   03e00008    jr  ra
 1b0:   27bd0030    addiu   sp,sp,48
#+END_SRC
